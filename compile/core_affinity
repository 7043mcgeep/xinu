../shell/xsh_voip.c:122:                    if (THRFREE == thrptr->state)
../shell/xsh_voip.c:126:                    if (strcmp(thrptr->name, T_NAME_SEND) == 0)
../shell/xsh_voip.c:178:        if (thrptr->state == THRFREE)
../shell/xsh_voip.c:183:        if (0 == strcmp(thrptr->name, "SHELL1"))
../shell/xsh_xweb.c:60:            if (thrptr->state == THRFREE)
../shell/xsh_xweb.c:65:            if (0 == strncmp(thrptr->name, "XWeb_", 5))
../shell/xsh_ps.c:73:        if (thrptr->state == THRFREE)
../shell/xsh_ps.c:79:               i, thrptr->name,
../shell/xsh_ps.c:80:               pstnams[(int)thrptr->state - 1],
../shell/xsh_ps.c:81:               thrptr->prio, thrptr->parent,
../shell/xsh_ps.c:82:               (ulong)thrptr->stkbase,
../shell/xsh_ps.c:83:               (ulong)thrptr->stkptr,
../shell/xsh_ps.c:84:               thrptr->stklen,
../shell/xsh_ps.c:85:	       thrptr->core_affinity);
../shell/xsh_telnetserver.c:67:            if (thrptr->state == THRFREE)
../shell/xsh_telnetserver.c:72:            if (0 == strncmp(thrptr->name, "telnetServ_", 11))
../system/initialize.c:121:	thrptr->state = THRCURR;
../system/initialize.c:122:	thrptr->prio = 0;
../system/initialize.c:123:	strlcpy(thrptr->name, "prnull", TNMLEN);
../system/initialize.c:124:	thrptr->stkbase = (void *)&_end;
../system/initialize.c:125:	thrptr->stklen = (ulong)memheap - (ulong)&_end;
../system/initialize.c:126:	thrptr->stklen = 8192; 	/* NULLSTK */
../system/initialize.c:127:	thrptr->stkptr = 0;
../system/initialize.c:128:	thrptr->memlist.next = NULL;
../system/initialize.c:129:	thrptr->memlist.length = 0;
../system/initialize.c:135:	thrptr->state = THRCURR;
../system/initialize.c:136:	thrptr->prio = 0;
../system/initialize.c:137:	strlcpy(thrptr->name, "prnull01", TNMLEN);
../system/initialize.c:138:	thrptr->stkbase = (void *)(&_end + 8192);
../system/initialize.c:139:	thrptr->stklen = 8192;
../system/initialize.c:140:	thrptr->stkptr = 0;
../system/initialize.c:141:	thrptr->memlist.next = NULL;
../system/initialize.c:142:	thrptr->memlist.length = 0;
../system/initialize.c:147:	thrptr->state = THRCURR;
../system/initialize.c:148:	thrptr->prio = 0;
../system/initialize.c:149:	strlcpy(thrptr->name, "prnull02", TNMLEN);
../system/initialize.c:150:	thrptr->stkbase = (void *)(&_end + 16384);
../system/initialize.c:151:	thrptr->stklen = 8192;
../system/initialize.c:152:	thrptr->stkptr = 0;
../system/initialize.c:153:	thrptr->memlist.next = NULL;
../system/initialize.c:154:	thrptr->memlist.length = 0;
../system/initialize.c:159:	thrptr->state = THRCURR;
../system/initialize.c:160:	thrptr->prio = 0;
../system/initialize.c:161:	strlcpy(thrptr->name, "prnull03", TNMLEN);
../system/initialize.c:162:	thrptr->stkbase = (void *)(&_end + 24576);
../system/initialize.c:163:	thrptr->stklen = 8192;
../system/initialize.c:164:	thrptr->stkptr = 0;
../system/initialize.c:165:	thrptr->memlist.next = NULL;
../system/initialize.c:166:	thrptr->memlist.length = 0;
../system/create.c:77:    thrptr->state = THRSUSP;
../system/create.c:78:    thrptr->prio = priority;
../system/create.c:79:    thrptr->stkbase = saddr;
../system/create.c:80:    thrptr->stklen = ssize;
../system/create.c:81:    strlcpy(thrptr->name, name, TNMLEN);
../system/create.c:82:    thrptr->parent = gettid();
../system/create.c:83:    thrptr->hasmsg = FALSE;
../system/create.c:84:    thrptr->memlist.next = NULL;
../system/create.c:85:    thrptr->memlist.length = 0;
../system/create.c:88:    thrptr->fdesc[0] = CONSOLE; /* stdin  is console */
../system/create.c:89:    thrptr->fdesc[1] = CONSOLE; /* stdout is console */
../system/create.c:90:    thrptr->fdesc[2] = CONSOLE; /* stderr is console */
../system/create.c:96:    thrptr->stkptr = setupStack(saddr, procaddr, INITRET, nargs, ap);
../system/unsleep.c:36:    if ((thrptr->state != THRSLEEP) && (thrptr->state != THRTMOUT))
../system/chprio.c:33:    oldprio = thrptr->prio;
../system/chprio.c:34:    thrptr->prio = newprio;
../system/receive.c:27:    if (FALSE == thrptr->hasmsg)
../system/receive.c:31:		thrptr->state = THRRECV;
../system/receive.c:40:    msg = thrptr->msg;          /* retrieve message                */
../system/receive.c:41:    thrptr->hasmsg = FALSE;     /* reset message flag              */
../system/send.c:31:    if ((THRFREE == thrptr->state) || thrptr->hasmsg)
../system/send.c:39:    thrptr->msg = msg;          /* deposit message                */
../system/send.c:40:    thrptr->hasmsg = TRUE;      /* raise message flag             */
../system/send.c:45:    if (THRRECV == thrptr->state)
../system/send.c:49:    else if (THRTMOUT == thrptr->state)
../system/resume.c:26:    if (isbadtid(tid) || (thrptr->state != THRSUSP))
../system/resume.c:33:    prio = thrptr->prio;
../system/ready.c:30:	thrptr->state = THRREADY;
../system/ready.c:31:	thrptr->core_affinity = core;
../system/ready.c:37:	if (-1 == thrptr->core_affinity)
../system/ready.c:39:		thrptr->core_affinity = cpuid;
../system/ready.c:44:	if (SYSERR == insert(tid, readylist[thrptr->core_affinity], thrptr->prio)){
../system/ready.c:48:	if ((resch == RESCHED_YES) && (thrptr->core_affinity == cpuid)){
../system/platforms/arm-rpi3/platforminit.c:142:		thrptr->core_affinity = -1;
../system/recvtime.c:34:    if (FALSE == thrptr->hasmsg)
../system/recvtime.c:58:    if (thrptr->hasmsg)
../system/recvtime.c:60:        msg = thrptr->msg;      /* retrieve message              */
../system/recvtime.c:61:        thrptr->hasmsg = FALSE; /* reset message flag            */
../system/wait.c:53:        thrptr->state = THRWAIT;
../system/wait.c:54:        thrptr->sem = sem;
../system/suspend.c:30:    if ((thrptr->state != THRCURR) && (thrptr->state != THRREADY))
../system/suspend.c:35:    if (THRREADY == thrptr->state)
../system/suspend.c:39:        thrptr->state = THRSUSP;
../system/suspend.c:45:        thrptr->state = THRSUSP;
../system/suspend.c:49:    prio = thrptr->prio;
../system/kill.c:43:	if (thrptr->core_affinity != cpuid)
../system/kill.c:62:	send(thrptr->parent, tid);
../system/kill.c:64:	stkfree(thrptr->stkbase, thrptr->stklen);
../system/kill.c:71:	switch (thrptr->state)
../system/kill.c:76:			thrptr->state = THRFREE;
../system/kill.c:81:			thrptr->state = THRFREE;        /* suicide */
../system/kill.c:86:			semtab_acquire(thrptr->sem);
../system/kill.c:87:			semtab[thrptr->sem].count++;
../system/kill.c:88:			semtab_release(thrptr->sem);
../system/kill.c:95:			thrptr->state = THRFREE;
../system/recvclr.c:29:    if (thrptr->hasmsg)
../system/recvclr.c:31:        msg = thrptr->msg;
../system/recvclr.c:37:    thrptr->hasmsg = FALSE;     /* reset message flag   */
../test/test_mailbox.c:215:    if (thrptr->state != THRWAIT)
../test/test_mailbox.c:241:    if (thrptr->state != THRWAIT)
